{"version":3,"file":"ngx-filepond.js","sources":["ngx-filepond/filepond.component.ts","ngx-filepond/filepond.module.ts","ngx-filepond/ngx-filepond.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  SimpleChanges,\n  ViewEncapsulation,\n  EventEmitter,\n  NgZone,\n  Input,\n  Output,\n  AfterViewInit,\n  OnChanges,\n  OnDestroy,\n} from \"@angular/core\";\n\nimport { create, supported, FilePond, FilePondOptions } from \"filepond\";\n\n// We test if filepond is supported on the current client\nconst isSupported: Boolean = supported();\n\n// List of attributes for fallback input\nconst inputAttributes: Array<string> = [\n  \"id\",\n  \"name\",\n  \"class\",\n  \"multiple\",\n  \"required\",\n  \"disabled\",\n  \"capture\",\n  \"accept\",\n];\n\n// Methods not made available on the component\nconst filteredComponentMethods: Array<string> = [\n  \"setOptions\",\n  \"on\",\n  \"off\",\n  \"onOnce\",\n  \"appendTo\",\n  \"insertAfter\",\n  \"insertBefore\",\n  \"isAttachedTo\",\n  \"replaceElement\",\n  \"restoreElement\",\n  \"destroy\",\n];\n\nconst outputs: Array<string> = [\n  \"oninit\",\n  \"onwarning\",\n  \"onerror\",\n  \"onactivatefile\",\n  \"onaddfilestart\",\n  \"onaddfileprogress\",\n  \"onaddfile\",\n  \"onprocessfilestart\",\n  \"onprocessfileprogress\",\n  \"onprocessfileabort\",\n  \"onprocessfilerevert\",\n  \"onprocessfile\",\n  \"onprocessfiles\",\n  \"onremovefile\",\n  \"onpreparefile\",\n  \"onupdatefiles\",\n];\n\n// Component outline\n@Component({\n  selector: \"file-pond\",\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: \"./filepond.component.html\",\n  styleUrls: [\"./filepond.component.css\"],\n})\nexport class FilePondComponent implements AfterViewInit, OnChanges, OnDestroy {\n  @Input()\n  options: FilePondOptions = {};\n\n  @Input()\n  files: FilePondOptions[\"files\"];\n\n  // same as outputs array\n  @Output() oninit = new EventEmitter<any>();\n  @Output() onwarning = new EventEmitter<any>();\n  @Output() onerror = new EventEmitter<any>();\n  @Output() onactivatefile = new EventEmitter<any>();\n  @Output() onaddfilestart = new EventEmitter<any>();\n  @Output() onaddfileprogress = new EventEmitter<any>();\n  @Output() onaddfile = new EventEmitter<any>();\n  @Output() onprocessfilestart = new EventEmitter<any>();\n  @Output() onprocessfileprogress = new EventEmitter<any>();\n  @Output() onprocessfileabort = new EventEmitter<any>();\n  @Output() onprocessfilerevert = new EventEmitter<any>();\n  @Output() onprocessfile = new EventEmitter<any>();\n  @Output() onprocessfiles = new EventEmitter<any>();\n  @Output() onremovefile = new EventEmitter<any>();\n  @Output() onpreparefile = new EventEmitter<any>();\n  @Output() onupdatefiles = new EventEmitter<any>();\n\n  private root: ElementRef;\n  private zone: NgZone;\n  private pond: FilePond;\n  private handleEvent: Function = null;\n\n  constructor(root: ElementRef, zone: NgZone) {\n    this.root = root;\n    this.zone = zone;\n  }\n\n  ngAfterViewInit() {\n    const input = this.root.nativeElement.querySelector(\"input\");\n\n    // transfer relevant attributes to input, this so we still have an input with the correct attributes should file pond not load\n    const attributes = this.root.nativeElement.attributes;\n    inputAttributes.forEach((name) => {\n      const value = attributes[name]\n        ? attributes[name].value\n        : this.options[name];\n      if (!value) {\n        return;\n      }\n      input.setAttribute(name, value);\n    });\n\n    // no sufficient features supported in this browser\n    if (!isSupported) {\n      return;\n    }\n\n    // map FilePond events to Angular @outputs\n    this.handleEvent = (e) => {\n      this[`on${e.type.split(\":\")[1]}`].emit({ ...e.detail });\n    };\n    outputs.forEach((event) => {\n      this.root.nativeElement.addEventListener(\n        `FilePond:${event.substr(2)}`,\n        this.handleEvent\n      );\n    });\n\n    // will block angular from listening to events inside the pond\n    this.zone.runOutsideAngular(() => {\n      // create instance\n      this.pond = create(input, {\n        // our options\n        ...this.options,\n\n        // our initial files\n        files: this.files,\n      });\n    });\n\n    // Copy instance method references to component instance\n    Object.keys(this.pond)\n\n      // remove unwanted methods\n      .filter((key) => filteredComponentMethods.indexOf(key) === -1)\n\n      // set method references from the component instance to the pond instance\n      .forEach((key) => {\n        this[key] = this.pond[key];\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // no need to handle first change\n    if (changes.firstChange) {\n      return;\n    }\n\n    // no filepond instance available\n    if (!this.pond) {\n      return;\n    }\n\n    // use new options object as base ( or if not available, use current options )\n    const options = changes.options\n      ? changes.options.currentValue\n      : this.options;\n\n    // see if file list has changed\n    if (\n      changes.files &&\n      JSON.stringify(changes.files.previousValue) !==\n        JSON.stringify(changes.files.currentValue)\n    ) {\n      // file list has changed\n      options.files = changes.files.currentValue;\n    }\n\n    // set new options\n    this.pond.setOptions(options);\n  }\n\n  ngOnDestroy() {\n    if (!this.pond) {\n      return;\n    }\n\n    outputs.forEach((event) => {\n      this.root.nativeElement.removeEventListener(\n        `FilePond:${event.substr(2)}`,\n        this.handleEvent\n      );\n    });\n\n    this.pond.destroy();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FilePondComponent } from './filepond.component';\n\nexport { registerPlugin } from 'filepond';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [FilePondComponent],\n  exports: [\n    FilePondComponent\n  ]\n})\nexport class FilePondModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {FilePondComponent as ɵa} from './filepond.component';"]}