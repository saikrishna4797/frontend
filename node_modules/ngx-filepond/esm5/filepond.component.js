import { __assign, __decorate } from "tslib";
import { Component, ElementRef, SimpleChanges, ViewEncapsulation, EventEmitter, NgZone, Input, Output, AfterViewInit, OnChanges, OnDestroy, } from "@angular/core";
import { create, supported } from "filepond";
// We test if filepond is supported on the current client
var isSupported = supported();
// List of attributes for fallback input
var inputAttributes = [
    "id",
    "name",
    "class",
    "multiple",
    "required",
    "disabled",
    "capture",
    "accept",
];
// Methods not made available on the component
var filteredComponentMethods = [
    "setOptions",
    "on",
    "off",
    "onOnce",
    "appendTo",
    "insertAfter",
    "insertBefore",
    "isAttachedTo",
    "replaceElement",
    "restoreElement",
    "destroy",
];
var outputs = [
    "oninit",
    "onwarning",
    "onerror",
    "onactivatefile",
    "onaddfilestart",
    "onaddfileprogress",
    "onaddfile",
    "onprocessfilestart",
    "onprocessfileprogress",
    "onprocessfileabort",
    "onprocessfilerevert",
    "onprocessfile",
    "onprocessfiles",
    "onremovefile",
    "onpreparefile",
    "onupdatefiles",
];
// Component outline
var FilePondComponent = /** @class */ (function () {
    function FilePondComponent(root, zone) {
        this.options = {};
        // same as outputs array
        this.oninit = new EventEmitter();
        this.onwarning = new EventEmitter();
        this.onerror = new EventEmitter();
        this.onactivatefile = new EventEmitter();
        this.onaddfilestart = new EventEmitter();
        this.onaddfileprogress = new EventEmitter();
        this.onaddfile = new EventEmitter();
        this.onprocessfilestart = new EventEmitter();
        this.onprocessfileprogress = new EventEmitter();
        this.onprocessfileabort = new EventEmitter();
        this.onprocessfilerevert = new EventEmitter();
        this.onprocessfile = new EventEmitter();
        this.onprocessfiles = new EventEmitter();
        this.onremovefile = new EventEmitter();
        this.onpreparefile = new EventEmitter();
        this.onupdatefiles = new EventEmitter();
        this.handleEvent = null;
        this.root = root;
        this.zone = zone;
    }
    FilePondComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var input = this.root.nativeElement.querySelector("input");
        // transfer relevant attributes to input, this so we still have an input with the correct attributes should file pond not load
        var attributes = this.root.nativeElement.attributes;
        inputAttributes.forEach(function (name) {
            var value = attributes[name]
                ? attributes[name].value
                : _this.options[name];
            if (!value) {
                return;
            }
            input.setAttribute(name, value);
        });
        // no sufficient features supported in this browser
        if (!isSupported) {
            return;
        }
        // map FilePond events to Angular @outputs
        this.handleEvent = function (e) {
            _this["on" + e.type.split(":")[1]].emit(__assign({}, e.detail));
        };
        outputs.forEach(function (event) {
            _this.root.nativeElement.addEventListener("FilePond:" + event.substr(2), _this.handleEvent);
        });
        // will block angular from listening to events inside the pond
        this.zone.runOutsideAngular(function () {
            // create instance
            _this.pond = create(input, __assign(__assign({}, _this.options), { 
                // our initial files
                files: _this.files }));
        });
        // Copy instance method references to component instance
        Object.keys(this.pond)
            // remove unwanted methods
            .filter(function (key) { return filteredComponentMethods.indexOf(key) === -1; })
            // set method references from the component instance to the pond instance
            .forEach(function (key) {
            _this[key] = _this.pond[key];
        });
    };
    FilePondComponent.prototype.ngOnChanges = function (changes) {
        // no need to handle first change
        if (changes.firstChange) {
            return;
        }
        // no filepond instance available
        if (!this.pond) {
            return;
        }
        // use new options object as base ( or if not available, use current options )
        var options = changes.options
            ? changes.options.currentValue
            : this.options;
        // see if file list has changed
        if (changes.files &&
            JSON.stringify(changes.files.previousValue) !==
                JSON.stringify(changes.files.currentValue)) {
            // file list has changed
            options.files = changes.files.currentValue;
        }
        // set new options
        this.pond.setOptions(options);
    };
    FilePondComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        if (!this.pond) {
            return;
        }
        outputs.forEach(function (event) {
            _this.root.nativeElement.removeEventListener("FilePond:" + event.substr(2), _this.handleEvent);
        });
        this.pond.destroy();
    };
    FilePondComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    __decorate([
        Input()
    ], FilePondComponent.prototype, "options", void 0);
    __decorate([
        Input()
    ], FilePondComponent.prototype, "files", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "oninit", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onwarning", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onerror", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onactivatefile", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onaddfilestart", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onaddfileprogress", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onaddfile", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onprocessfilestart", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onprocessfileprogress", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onprocessfileabort", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onprocessfilerevert", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onprocessfile", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onprocessfiles", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onremovefile", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onpreparefile", void 0);
    __decorate([
        Output()
    ], FilePondComponent.prototype, "onupdatefiles", void 0);
    FilePondComponent = __decorate([
        Component({
            selector: "file-pond",
            encapsulation: ViewEncapsulation.None,
            template: "<div class=\"filepond--wrapper\">\n  <input type=\"file\"/>\n</div>",
            styles: [""]
        })
    ], FilePondComponent);
    return FilePondComponent;
}());
export { FilePondComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXBvbmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZpbGVwb25kLyIsInNvdXJjZXMiOlsiZmlsZXBvbmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixhQUFhLEVBQ2IsU0FBUyxFQUNULFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBNkIsTUFBTSxVQUFVLENBQUM7QUFFeEUseURBQXlEO0FBQ3pELElBQU0sV0FBVyxHQUFZLFNBQVMsRUFBRSxDQUFDO0FBRXpDLHdDQUF3QztBQUN4QyxJQUFNLGVBQWUsR0FBa0I7SUFDckMsSUFBSTtJQUNKLE1BQU07SUFDTixPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7Q0FDVCxDQUFDO0FBRUYsOENBQThDO0FBQzlDLElBQU0sd0JBQXdCLEdBQWtCO0lBQzlDLFlBQVk7SUFDWixJQUFJO0lBQ0osS0FBSztJQUNMLFFBQVE7SUFDUixVQUFVO0lBQ1YsYUFBYTtJQUNiLGNBQWM7SUFDZCxjQUFjO0lBQ2QsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixTQUFTO0NBQ1YsQ0FBQztBQUVGLElBQU0sT0FBTyxHQUFrQjtJQUM3QixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixXQUFXO0lBQ1gsb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2QixvQkFBb0I7SUFDcEIscUJBQXFCO0lBQ3JCLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGVBQWU7SUFDZixlQUFlO0NBQ2hCLENBQUM7QUFFRixvQkFBb0I7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QztZQUNULFFBQVEsRUFBRSxXQUFXO1lBQ3JCLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1lBQ3JDLCtFQUF3Qzs7U0FFekMsQ0FBQztPQUNXLGlCQUFpQixDQXNJN0I7SUFBRCx3QkFBQztDQUFBLEFBdElELElBc0lDO1NBdElZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIEV2ZW50RW1pdHRlcixcbiAgTmdab25lLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBBZnRlclZpZXdJbml0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgY3JlYXRlLCBzdXBwb3J0ZWQsIEZpbGVQb25kLCBGaWxlUG9uZE9wdGlvbnMgfSBmcm9tIFwiZmlsZXBvbmRcIjtcblxuLy8gV2UgdGVzdCBpZiBmaWxlcG9uZCBpcyBzdXBwb3J0ZWQgb24gdGhlIGN1cnJlbnQgY2xpZW50XG5jb25zdCBpc1N1cHBvcnRlZDogQm9vbGVhbiA9IHN1cHBvcnRlZCgpO1xuXG4vLyBMaXN0IG9mIGF0dHJpYnV0ZXMgZm9yIGZhbGxiYWNrIGlucHV0XG5jb25zdCBpbnB1dEF0dHJpYnV0ZXM6IEFycmF5PHN0cmluZz4gPSBbXG4gIFwiaWRcIixcbiAgXCJuYW1lXCIsXG4gIFwiY2xhc3NcIixcbiAgXCJtdWx0aXBsZVwiLFxuICBcInJlcXVpcmVkXCIsXG4gIFwiZGlzYWJsZWRcIixcbiAgXCJjYXB0dXJlXCIsXG4gIFwiYWNjZXB0XCIsXG5dO1xuXG4vLyBNZXRob2RzIG5vdCBtYWRlIGF2YWlsYWJsZSBvbiB0aGUgY29tcG9uZW50XG5jb25zdCBmaWx0ZXJlZENvbXBvbmVudE1ldGhvZHM6IEFycmF5PHN0cmluZz4gPSBbXG4gIFwic2V0T3B0aW9uc1wiLFxuICBcIm9uXCIsXG4gIFwib2ZmXCIsXG4gIFwib25PbmNlXCIsXG4gIFwiYXBwZW5kVG9cIixcbiAgXCJpbnNlcnRBZnRlclwiLFxuICBcImluc2VydEJlZm9yZVwiLFxuICBcImlzQXR0YWNoZWRUb1wiLFxuICBcInJlcGxhY2VFbGVtZW50XCIsXG4gIFwicmVzdG9yZUVsZW1lbnRcIixcbiAgXCJkZXN0cm95XCIsXG5dO1xuXG5jb25zdCBvdXRwdXRzOiBBcnJheTxzdHJpbmc+ID0gW1xuICBcIm9uaW5pdFwiLFxuICBcIm9ud2FybmluZ1wiLFxuICBcIm9uZXJyb3JcIixcbiAgXCJvbmFjdGl2YXRlZmlsZVwiLFxuICBcIm9uYWRkZmlsZXN0YXJ0XCIsXG4gIFwib25hZGRmaWxlcHJvZ3Jlc3NcIixcbiAgXCJvbmFkZGZpbGVcIixcbiAgXCJvbnByb2Nlc3NmaWxlc3RhcnRcIixcbiAgXCJvbnByb2Nlc3NmaWxlcHJvZ3Jlc3NcIixcbiAgXCJvbnByb2Nlc3NmaWxlYWJvcnRcIixcbiAgXCJvbnByb2Nlc3NmaWxlcmV2ZXJ0XCIsXG4gIFwib25wcm9jZXNzZmlsZVwiLFxuICBcIm9ucHJvY2Vzc2ZpbGVzXCIsXG4gIFwib25yZW1vdmVmaWxlXCIsXG4gIFwib25wcmVwYXJlZmlsZVwiLFxuICBcIm9udXBkYXRlZmlsZXNcIixcbl07XG5cbi8vIENvbXBvbmVudCBvdXRsaW5lXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwiZmlsZS1wb25kXCIsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHRlbXBsYXRlVXJsOiBcIi4vZmlsZXBvbmQuY29tcG9uZW50Lmh0bWxcIixcbiAgc3R5bGVVcmxzOiBbXCIuL2ZpbGVwb25kLmNvbXBvbmVudC5jc3NcIl0sXG59KVxuZXhwb3J0IGNsYXNzIEZpbGVQb25kQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKVxuICBvcHRpb25zOiBGaWxlUG9uZE9wdGlvbnMgPSB7fTtcblxuICBASW5wdXQoKVxuICBmaWxlczogRmlsZVBvbmRPcHRpb25zW1wiZmlsZXNcIl07XG5cbiAgLy8gc2FtZSBhcyBvdXRwdXRzIGFycmF5XG4gIEBPdXRwdXQoKSBvbmluaXQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG9ud2FybmluZyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgb25lcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgb25hY3RpdmF0ZWZpbGUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG9uYWRkZmlsZXN0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbmFkZGZpbGVwcm9ncmVzcyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgb25hZGRmaWxlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbnByb2Nlc3NmaWxlc3RhcnQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG9ucHJvY2Vzc2ZpbGVwcm9ncmVzcyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgb25wcm9jZXNzZmlsZWFib3J0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbnByb2Nlc3NmaWxlcmV2ZXJ0ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbnByb2Nlc3NmaWxlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbnByb2Nlc3NmaWxlcyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgb25yZW1vdmVmaWxlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbnByZXBhcmVmaWxlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbnVwZGF0ZWZpbGVzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgcHJpdmF0ZSByb290OiBFbGVtZW50UmVmO1xuICBwcml2YXRlIHpvbmU6IE5nWm9uZTtcbiAgcHJpdmF0ZSBwb25kOiBGaWxlUG9uZDtcbiAgcHJpdmF0ZSBoYW5kbGVFdmVudDogRnVuY3Rpb24gPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHJvb3Q6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSkge1xuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgdGhpcy56b25lID0gem9uZTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBjb25zdCBpbnB1dCA9IHRoaXMucm9vdC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcblxuICAgIC8vIHRyYW5zZmVyIHJlbGV2YW50IGF0dHJpYnV0ZXMgdG8gaW5wdXQsIHRoaXMgc28gd2Ugc3RpbGwgaGF2ZSBhbiBpbnB1dCB3aXRoIHRoZSBjb3JyZWN0IGF0dHJpYnV0ZXMgc2hvdWxkIGZpbGUgcG9uZCBub3QgbG9hZFxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLnJvb3QubmF0aXZlRWxlbWVudC5hdHRyaWJ1dGVzO1xuICAgIGlucHV0QXR0cmlidXRlcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV1cbiAgICAgICAgPyBhdHRyaWJ1dGVzW25hbWVdLnZhbHVlXG4gICAgICAgIDogdGhpcy5vcHRpb25zW25hbWVdO1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gbm8gc3VmZmljaWVudCBmZWF0dXJlcyBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXG4gICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIG1hcCBGaWxlUG9uZCBldmVudHMgdG8gQW5ndWxhciBAb3V0cHV0c1xuICAgIHRoaXMuaGFuZGxlRXZlbnQgPSAoZSkgPT4ge1xuICAgICAgdGhpc1tgb24ke2UudHlwZS5zcGxpdChcIjpcIilbMV19YF0uZW1pdCh7IC4uLmUuZGV0YWlsIH0pO1xuICAgIH07XG4gICAgb3V0cHV0cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgdGhpcy5yb290Lm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgYEZpbGVQb25kOiR7ZXZlbnQuc3Vic3RyKDIpfWAsXG4gICAgICAgIHRoaXMuaGFuZGxlRXZlbnRcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICAvLyB3aWxsIGJsb2NrIGFuZ3VsYXIgZnJvbSBsaXN0ZW5pbmcgdG8gZXZlbnRzIGluc2lkZSB0aGUgcG9uZFxuICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAvLyBjcmVhdGUgaW5zdGFuY2VcbiAgICAgIHRoaXMucG9uZCA9IGNyZWF0ZShpbnB1dCwge1xuICAgICAgICAvLyBvdXIgb3B0aW9uc1xuICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG5cbiAgICAgICAgLy8gb3VyIGluaXRpYWwgZmlsZXNcbiAgICAgICAgZmlsZXM6IHRoaXMuZmlsZXMsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIENvcHkgaW5zdGFuY2UgbWV0aG9kIHJlZmVyZW5jZXMgdG8gY29tcG9uZW50IGluc3RhbmNlXG4gICAgT2JqZWN0LmtleXModGhpcy5wb25kKVxuXG4gICAgICAvLyByZW1vdmUgdW53YW50ZWQgbWV0aG9kc1xuICAgICAgLmZpbHRlcigoa2V5KSA9PiBmaWx0ZXJlZENvbXBvbmVudE1ldGhvZHMuaW5kZXhPZihrZXkpID09PSAtMSlcblxuICAgICAgLy8gc2V0IG1ldGhvZCByZWZlcmVuY2VzIGZyb20gdGhlIGNvbXBvbmVudCBpbnN0YW5jZSB0byB0aGUgcG9uZCBpbnN0YW5jZVxuICAgICAgLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICB0aGlzW2tleV0gPSB0aGlzLnBvbmRba2V5XTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIC8vIG5vIG5lZWQgdG8gaGFuZGxlIGZpcnN0IGNoYW5nZVxuICAgIGlmIChjaGFuZ2VzLmZpcnN0Q2hhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gbm8gZmlsZXBvbmQgaW5zdGFuY2UgYXZhaWxhYmxlXG4gICAgaWYgKCF0aGlzLnBvbmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyB1c2UgbmV3IG9wdGlvbnMgb2JqZWN0IGFzIGJhc2UgKCBvciBpZiBub3QgYXZhaWxhYmxlLCB1c2UgY3VycmVudCBvcHRpb25zIClcbiAgICBjb25zdCBvcHRpb25zID0gY2hhbmdlcy5vcHRpb25zXG4gICAgICA/IGNoYW5nZXMub3B0aW9ucy5jdXJyZW50VmFsdWVcbiAgICAgIDogdGhpcy5vcHRpb25zO1xuXG4gICAgLy8gc2VlIGlmIGZpbGUgbGlzdCBoYXMgY2hhbmdlZFxuICAgIGlmIChcbiAgICAgIGNoYW5nZXMuZmlsZXMgJiZcbiAgICAgIEpTT04uc3RyaW5naWZ5KGNoYW5nZXMuZmlsZXMucHJldmlvdXNWYWx1ZSkgIT09XG4gICAgICAgIEpTT04uc3RyaW5naWZ5KGNoYW5nZXMuZmlsZXMuY3VycmVudFZhbHVlKVxuICAgICkge1xuICAgICAgLy8gZmlsZSBsaXN0IGhhcyBjaGFuZ2VkXG4gICAgICBvcHRpb25zLmZpbGVzID0gY2hhbmdlcy5maWxlcy5jdXJyZW50VmFsdWU7XG4gICAgfVxuXG4gICAgLy8gc2V0IG5ldyBvcHRpb25zXG4gICAgdGhpcy5wb25kLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAoIXRoaXMucG9uZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG91dHB1dHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMucm9vdC5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGBGaWxlUG9uZDoke2V2ZW50LnN1YnN0cigyKX1gLFxuICAgICAgICB0aGlzLmhhbmRsZUV2ZW50XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGhpcy5wb25kLmRlc3Ryb3koKTtcbiAgfVxufVxuIl19