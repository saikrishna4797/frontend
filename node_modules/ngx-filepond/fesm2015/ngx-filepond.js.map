{"version":3,"file":"ngx-filepond.js","sources":["ng://ngx-filepond/filepond.component.ts","ng://ngx-filepond/filepond.module.ts","ng://ngx-filepond/ngx-filepond.ts"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  SimpleChanges,\n  ViewEncapsulation,\n  EventEmitter,\n  NgZone,\n  Input,\n  Output,\n  AfterViewInit,\n  OnChanges,\n  OnDestroy,\n} from \"@angular/core\";\n\nimport { create, supported, FilePond, FilePondOptions } from \"filepond\";\n\n// We test if filepond is supported on the current client\nconst isSupported: Boolean = supported();\n\n// List of attributes for fallback input\nconst inputAttributes: Array<string> = [\n  \"id\",\n  \"name\",\n  \"class\",\n  \"multiple\",\n  \"required\",\n  \"disabled\",\n  \"capture\",\n  \"accept\",\n];\n\n// Methods not made available on the component\nconst filteredComponentMethods: Array<string> = [\n  \"setOptions\",\n  \"on\",\n  \"off\",\n  \"onOnce\",\n  \"appendTo\",\n  \"insertAfter\",\n  \"insertBefore\",\n  \"isAttachedTo\",\n  \"replaceElement\",\n  \"restoreElement\",\n  \"destroy\",\n];\n\nconst outputs: Array<string> = [\n  \"oninit\",\n  \"onwarning\",\n  \"onerror\",\n  \"onactivatefile\",\n  \"onaddfilestart\",\n  \"onaddfileprogress\",\n  \"onaddfile\",\n  \"onprocessfilestart\",\n  \"onprocessfileprogress\",\n  \"onprocessfileabort\",\n  \"onprocessfilerevert\",\n  \"onprocessfile\",\n  \"onprocessfiles\",\n  \"onremovefile\",\n  \"onpreparefile\",\n  \"onupdatefiles\",\n];\n\n// Component outline\n@Component({\n  selector: \"file-pond\",\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: \"./filepond.component.html\",\n  styleUrls: [\"./filepond.component.css\"],\n})\nexport class FilePondComponent implements AfterViewInit, OnChanges, OnDestroy {\n  @Input()\n  options: FilePondOptions = {};\n\n  @Input()\n  files: FilePondOptions[\"files\"];\n\n  // same as outputs array\n  @Output() oninit = new EventEmitter<any>();\n  @Output() onwarning = new EventEmitter<any>();\n  @Output() onerror = new EventEmitter<any>();\n  @Output() onactivatefile = new EventEmitter<any>();\n  @Output() onaddfilestart = new EventEmitter<any>();\n  @Output() onaddfileprogress = new EventEmitter<any>();\n  @Output() onaddfile = new EventEmitter<any>();\n  @Output() onprocessfilestart = new EventEmitter<any>();\n  @Output() onprocessfileprogress = new EventEmitter<any>();\n  @Output() onprocessfileabort = new EventEmitter<any>();\n  @Output() onprocessfilerevert = new EventEmitter<any>();\n  @Output() onprocessfile = new EventEmitter<any>();\n  @Output() onprocessfiles = new EventEmitter<any>();\n  @Output() onremovefile = new EventEmitter<any>();\n  @Output() onpreparefile = new EventEmitter<any>();\n  @Output() onupdatefiles = new EventEmitter<any>();\n\n  private root: ElementRef;\n  private zone: NgZone;\n  private pond: FilePond;\n  private handleEvent: Function = null;\n\n  constructor(root: ElementRef, zone: NgZone) {\n    this.root = root;\n    this.zone = zone;\n  }\n\n  ngAfterViewInit() {\n    const input = this.root.nativeElement.querySelector(\"input\");\n\n    // transfer relevant attributes to input, this so we still have an input with the correct attributes should file pond not load\n    const attributes = this.root.nativeElement.attributes;\n    inputAttributes.forEach((name) => {\n      const value = attributes[name]\n        ? attributes[name].value\n        : this.options[name];\n      if (!value) {\n        return;\n      }\n      input.setAttribute(name, value);\n    });\n\n    // no sufficient features supported in this browser\n    if (!isSupported) {\n      return;\n    }\n\n    // map FilePond events to Angular @outputs\n    this.handleEvent = (e) => {\n      this[`on${e.type.split(\":\")[1]}`].emit({ ...e.detail });\n    };\n    outputs.forEach((event) => {\n      this.root.nativeElement.addEventListener(\n        `FilePond:${event.substr(2)}`,\n        this.handleEvent\n      );\n    });\n\n    // will block angular from listening to events inside the pond\n    this.zone.runOutsideAngular(() => {\n      // create instance\n      this.pond = create(input, {\n        // our options\n        ...this.options,\n\n        // our initial files\n        files: this.files,\n      });\n    });\n\n    // Copy instance method references to component instance\n    Object.keys(this.pond)\n\n      // remove unwanted methods\n      .filter((key) => filteredComponentMethods.indexOf(key) === -1)\n\n      // set method references from the component instance to the pond instance\n      .forEach((key) => {\n        this[key] = this.pond[key];\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // no need to handle first change\n    if (changes.firstChange) {\n      return;\n    }\n\n    // no filepond instance available\n    if (!this.pond) {\n      return;\n    }\n\n    // use new options object as base ( or if not available, use current options )\n    const options = changes.options\n      ? changes.options.currentValue\n      : this.options;\n\n    // see if file list has changed\n    if (\n      changes.files &&\n      JSON.stringify(changes.files.previousValue) !==\n        JSON.stringify(changes.files.currentValue)\n    ) {\n      // file list has changed\n      options.files = changes.files.currentValue;\n    }\n\n    // set new options\n    this.pond.setOptions(options);\n  }\n\n  ngOnDestroy() {\n    if (!this.pond) {\n      return;\n    }\n\n    outputs.forEach((event) => {\n      this.root.nativeElement.removeEventListener(\n        `FilePond:${event.substr(2)}`,\n        this.handleEvent\n      );\n    });\n\n    this.pond.destroy();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FilePondComponent } from './filepond.component';\n\nexport { registerPlugin } from 'filepond';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [FilePondComponent],\n  exports: [\n    FilePondComponent\n  ]\n})\nexport class FilePondModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {FilePondComponent as Éµa} from './filepond.component';"],"names":[],"mappings":";;;;;;AAgBA;AACA,MAAM,WAAW,GAAY,SAAS,EAAE,CAAC;AAEzC;AACA,MAAM,eAAe,GAAkB;IACrC,IAAI;IACJ,MAAM;IACN,OAAO;IACP,UAAU;IACV,UAAU;IACV,UAAU;IACV,SAAS;IACT,QAAQ;CACT,CAAC;AAEF;AACA,MAAM,wBAAwB,GAAkB;IAC9C,YAAY;IACZ,IAAI;IACJ,KAAK;IACL,QAAQ;IACR,UAAU;IACV,aAAa;IACb,cAAc;IACd,cAAc;IACd,gBAAgB;IAChB,gBAAgB;IAChB,SAAS;CACV,CAAC;AAEF,MAAM,OAAO,GAAkB;IAC7B,QAAQ;IACR,WAAW;IACX,SAAS;IACT,gBAAgB;IAChB,gBAAgB;IAChB,mBAAmB;IACnB,WAAW;IACX,oBAAoB;IACpB,uBAAuB;IACvB,oBAAoB;IACpB,qBAAqB;IACrB,eAAe;IACf,gBAAgB;IAChB,cAAc;IACd,eAAe;IACf,eAAe;CAChB,CAAC;AAEF;IAOa,iBAAiB,GAA9B,MAAa,iBAAiB;IA8B5B,YAAY,IAAgB,EAAE,IAAY;QA5B1C,YAAO,GAAoB,EAAE,CAAC;;QAMpB,WAAM,GAAG,IAAI,YAAY,EAAO,CAAC;QACjC,cAAS,GAAG,IAAI,YAAY,EAAO,CAAC;QACpC,YAAO,GAAG,IAAI,YAAY,EAAO,CAAC;QAClC,mBAAc,GAAG,IAAI,YAAY,EAAO,CAAC;QACzC,mBAAc,GAAG,IAAI,YAAY,EAAO,CAAC;QACzC,sBAAiB,GAAG,IAAI,YAAY,EAAO,CAAC;QAC5C,cAAS,GAAG,IAAI,YAAY,EAAO,CAAC;QACpC,uBAAkB,GAAG,IAAI,YAAY,EAAO,CAAC;QAC7C,0BAAqB,GAAG,IAAI,YAAY,EAAO,CAAC;QAChD,uBAAkB,GAAG,IAAI,YAAY,EAAO,CAAC;QAC7C,wBAAmB,GAAG,IAAI,YAAY,EAAO,CAAC;QAC9C,kBAAa,GAAG,IAAI,YAAY,EAAO,CAAC;QACxC,mBAAc,GAAG,IAAI,YAAY,EAAO,CAAC;QACzC,iBAAY,GAAG,IAAI,YAAY,EAAO,CAAC;QACvC,kBAAa,GAAG,IAAI,YAAY,EAAO,CAAC;QACxC,kBAAa,GAAG,IAAI,YAAY,EAAO,CAAC;QAK1C,gBAAW,GAAa,IAAI,CAAC;QAGnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;IAED,eAAe;QACb,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;;QAG7D,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;QACtD,eAAe,CAAC,OAAO,CAAC,CAAC,IAAI;YAC3B,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC;kBAC1B,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK;kBACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,EAAE;gBACV,OAAO;aACR;YACD,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SACjC,CAAC,CAAC;;QAGH,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO;SACR;;QAGD,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,mBAAM,CAAC,CAAC,MAAM,EAAG,CAAC;SACzD,CAAC;QACF,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK;YACpB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CACtC,YAAY,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAC7B,IAAI,CAAC,WAAW,CACjB,CAAC;SACH,CAAC,CAAC;;QAGH,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;;YAE1B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,kCAEnB,IAAI,CAAC,OAAO;;gBAGf,KAAK,EAAE,IAAI,CAAC,KAAK,IACjB,CAAC;SACJ,CAAC,CAAC;;QAGH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;aAGnB,MAAM,CAAC,CAAC,GAAG,KAAK,wBAAwB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;;aAG7D,OAAO,CAAC,CAAC,GAAG;YACX,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC5B,CAAC,CAAC;KACN;IAED,WAAW,CAAC,OAAsB;;QAEhC,IAAI,OAAO,CAAC,WAAW,EAAE;YACvB,OAAO;SACR;;QAGD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,OAAO;SACR;;QAGD,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO;cAC3B,OAAO,CAAC,OAAO,CAAC,YAAY;cAC5B,IAAI,CAAC,OAAO,CAAC;;QAGjB,IACE,OAAO,CAAC,KAAK;YACb,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC;gBACzC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,EAC5C;;YAEA,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC;SAC5C;;QAGD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;KAC/B;IAED,WAAW;QACT,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,OAAO;SACR;QAED,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK;YACpB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,mBAAmB,CACzC,YAAY,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAC7B,IAAI,CAAC,WAAW,CACjB,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;KACrB;EACF;;YAxGmB,UAAU;YAAQ,MAAM;;AA5B1C;IADC,KAAK,EAAE;kDACsB;AAG9B;IADC,KAAK,EAAE;gDACwB;AAGtB;IAAT,MAAM,EAAE;iDAAkC;AACjC;IAAT,MAAM,EAAE;oDAAqC;AACpC;IAAT,MAAM,EAAE;kDAAmC;AAClC;IAAT,MAAM,EAAE;yDAA0C;AACzC;IAAT,MAAM,EAAE;yDAA0C;AACzC;IAAT,MAAM,EAAE;4DAA6C;AAC5C;IAAT,MAAM,EAAE;oDAAqC;AACpC;IAAT,MAAM,EAAE;6DAA8C;AAC7C;IAAT,MAAM,EAAE;gEAAiD;AAChD;IAAT,MAAM,EAAE;6DAA8C;AAC7C;IAAT,MAAM,EAAE;8DAA+C;AAC9C;IAAT,MAAM,EAAE;wDAAyC;AACxC;IAAT,MAAM,EAAE;yDAA0C;AACzC;IAAT,MAAM,EAAE;uDAAwC;AACvC;IAAT,MAAM,EAAE;wDAAyC;AACxC;IAAT,MAAM,EAAE;wDAAyC;AAvBvC,iBAAiB;IAN7B,SAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,+EAAwC;;KAEzC,CAAC;GACW,iBAAiB,CAsI7B;;IC9LY,cAAc,GAA3B,MAAa,cAAc;EAAI;AAAlB,cAAc;IAT1B,QAAQ,CAAC;QACR,OAAO,EAAE;YACP,YAAY;SACb;QACD,YAAY,EAAE,CAAC,iBAAiB,CAAC;QACjC,OAAO,EAAE;YACP,iBAAiB;SAClB;KACF,CAAC;GACW,cAAc,CAAI;;AChB/B;;;;;;"}